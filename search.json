[{"title":"博客主题配置及踩坑记录","path":"/posts/48181fae.html","content":"捣鼓了一下博客，记录了一些配置踩坑记录~ HEXO命令hexo new My New Posthexo cleanhexo generatehexo serverhexo deploy Stellar理念真正的简约远不止删繁就简，而是在纷繁中建立秩序。 降低视觉密度 提高有效信息优先级 删掉无效信息 安装打开终端并进入博客文件夹，执行：npm i hexo-theme-stellar在 blog/_config.yml 文件中找到并修改：theme: stellar 文章类型tech: 默认技术类文章, story: 图文类文章（文字和段落间增距大）blog/_config.stellar.ymlarticle: type: tech # tech/story 站点信息配置_config.yml 主题配置文件在博客根目录的 _config.yml 文件旁边新建一个文件： _config.stellar.yml ，在这个文件中的配置信息优先级高于主题文件夹中的配置文件。将主题的配置文件复制到根目录下 自动生成封面blog/_config.stellar.ymlarticle: auto_cover: true 引用外部图片在文章的 front-matter 中写上 cover: xxx 即可。例如：---# 本地图片路径为 blog/source/assets/xaoxuu/blog/2020-0927a@1x.svg# 也可以直接引用图片直链 https://xxx.jpgcover: /assets/xaoxuu/blog/2020-0927a@1x.svg--- 自动生成摘要blog/_config.stellar.ymlarticle: auto_excerpt: 200 Fonthttps://github.com/xaoxuu/hexo-theme-stellar-examples/blob/main/blog/_config.stellar.yml inject: head: - link rel=apple-touch-icon sizes=180x180 href=/assets/xaoxuu/favicon/apple-touch-icon.png - link rel=icon type=image/png sizes=32x32 href=/assets/xaoxuu/favicon/favicon-32x32.png - link rel=icon type=image/png sizes=16x16 href=/assets/xaoxuu/favicon/favicon-16x16.png - link rel=manifest href=/assets/xaoxuu/favicon/site.webmanifest - link rel=shortcut icon href=/assets/xaoxuu/favicon/favicon.ico - meta name=theme-color content=#f8f8f8 - link rel=stylesheet href=https://cdn.bootcdn.net/ajax/libs/lxgw-wenkai-screen-webfont/1.7.0/style.min.css media=all / style: text-align: justify smooth_scroll: false codeblock: scrollbar: 0px font-size: body: 1rem font-family: logo: LXGW WenKai Screen, system-ui, Microsoft Yahei, Segoe UI, -apple-system, Roboto, Ubuntu, Helvetica Neue, Arial, WenQuanYi Micro Hei, sans-serif body: LXGW WenKai Screen, system-ui, Microsoft Yahei, Segoe UI, -apple-system, Roboto, Ubuntu, Helvetica Neue, Arial, WenQuanYi Micro Hei, sans-serif code: LXGW WenKai Screen, Menlo, Monaco, Consolas, system-ui, Courier New, monospace, sans-serif codeblock: Menlo, Monaco, Consolas, system-ui, Courier New, monospace, sans-serif 文章模板根目录下 scaffolds 文件夹中编辑 post.md 的 font-matter ，根据自己的需要增加你想要配置的内容 ---# 基本信息title: title date: date tags: []categories: []description: # excerpt 也可 # 封面cover: banner: poster: # 海报（可选，全图封面卡片） topic: 标题上方的小字 # 可选 headline: 大标题 # 必选 caption: 标题下方的小字 # 可选 color: 标题颜色 # 可选# 插件sticky: # 数字越大越靠前mermaid:katex: mathjax: # 可选topic: # 专栏 idauthor: references:comments: # 设置 false 禁止评论indexing: # 设置 false 避免被搜索breadcrumb: # 设置 false 隐藏面包屑导航leftbar: rightbar:h1: # 设置为 隐藏标题type: # tech/story--- 文章如果有分类和标签就会自动在主页出现「分类」、「标签」选项卡实现分类浏览，不需要手动添加页面。 文章页横幅图片blog/source/_posts/xxx.mdbanner: /assets/xaoxuu/blog/2020-0927a@1x.svg 指定一级标题默认的一级标题是文章的 title，如果希望使用别的文字作为一级标题，可以指定 h1，例如： blog/source/_posts/xxx.md---h1: 快速开始--- 文章索引文章分类文章如果有分类和标签就会自动在主页出现「分类」、「标签」选项卡实现分类浏览，不需要手动添加页面。 在文章列表页面会显示文章所属的第一级分类，例如： blog/source/_posts/xxx.md---categories: [设计开发, iOS开发]--- 这样写就只会显示「设计开发」一级分类，而在文章页面顶部则会显示完整的面包屑导航。 更多独立页面为了能够正确进行导航栏高亮，引入了 menu_id 来进行区分，可以在 front-matter 中指定 menu_id 来使某个菜单按钮处于选中状态。 例如您有关于、友链两个页面，都希望高亮「更多」按钮： blogsourceaboutindex.md ---menu_id: moretitle: 关于--- blogsourcefriendsindex.md ---menu_id: moretitle: 友链--- blog_config.stellar.yml menubar: columns: 4 # 一行多少个 items: # 可按照自己需求增加，符合以下格式即可 ... - id: more theme: title: 更多 icon: url: /more/ 组件库文章文档的目录树组件，显示文章和文档的目录结构： 在 wiki 板块显示的是最近更新的 wiki 页面，其余地方显示最近更新的文章。 toc: layout: toc list_number: false # 是否显示序号 min_depth: 2 # 建议不要低于 2 即从 H2 标签开始解析（H1标签用于文章大标题） max_depth: 5 # 5 代表最多解析到 H5 标签 fallback: recent # Use a backup widget when toc does not exist. collapse: false # true / false / auto (始终折叠/不折叠/自动折叠)recent: layout: recent rss: # /atom.xml # npm i hexo-generator-feed limit: 5 # Count of posts 侧边栏设置logo: subtitle: ‘’ # ‘文字1 | 文字2’ (鼠标放上去会切换到文字2) Navbar（主导航栏）自己可以增加任意的键值对，键：就是 menu_id，后面需要用到，值：就是显示的 md 链接，方括号内支持文字和图片标签 侧边栏欢迎语 在主题文件目录下的_datawidgets.yml 文件中新增一项侧边栏配置，写下你的网站欢迎语. 可以引用开放接口，如【今日诗词】. welcome: layout: markdown title: 🎉 欢迎 content: | 本站托管于 Github, 可能会出现加载缓慢或丢失问题，欢迎在评论区交流技术知识。 br hr 今日诗词: span id=jinrishici-sentence /span script src=https://sdk.jinrishici.com/v2/browser/jinrishici.js charset=utf-8 /script 修改主题配置_config.stellar.yml，设置欢迎语出现的具体位置 widgets: #### 自动生成的页面 #### # 主页 home: search, welcome, recent, tagcloud, timeline # for home 永久链接软件npm install hexo-abbrlink --save 标签颜色配置文件 article: category_color: 探索号: #f44336 # 博客搭建: #4CB9E7 # Hexo: #FF004D # ChatGPT: #43766C # 绘画: #11009E # 前端: #F08A5D 本站由 @{author.name} 使用 {theme.name} {theme.version} 主题创建。 底部配置文件的style里的content content: | # 支持 Markdown 格式 center 本站由 @a href=/strongauthor.name/strong/a 使用 a href=theme.treetheme.name theme.version/a 主题创建。 /center center /br /br script type=text/javascript function show_runtime() window.setTimeout(show_runtime(), 1000); X = new Date(2025/03/25 00:00:00 ); Y = new Date(); T = (Y.getTime() - X.getTime()); M = 24 * 60 * 60 * 1000; a = T / M; A = Math.floor(a); b = (a - A) * 24; B = Math.floor(b); c = (b - B) * 60; C = Math.floor((b - B) * 60); D = Math.floor((c - C) * 60); runtime_span.innerHTML = 🌱 营业 + A + 天- + B + 小时- + C + 分- + D + 秒 🛞 show_runtime(); /script span id=runtime_span /span center WIKIhttps://xaoxuu.com/wiki/stellar/wiki-settings/ 新建blogsource_data，并新建wiki文件夹，在wiki下新建自己的项目文件夹。 _data下面的wiki是用来做配置的，不是放文件的。 blog/source/_data/wiki/项目名.ymlname: WebSectitle: Web安全subtitle: Web安全 | 没有绝对安全的系统# tags:# icon: /assets/wiki/stellar/icon.svg# cover: /assets/wiki/stellar/icon.svgdescription: 对于Web安全漏洞原理及挖掘手法进行总结，以便于自己查阅。# repo: xaoxuu/hexo-theme-stellarsearch: filter: /wiki/WebSec/ placeholder: 在 WebSec中搜索...leftbar: - tree - timeline_stellar_releases - related# comment_title: 评论区仅供交流，有问题请提 [issue](https://github.com/xaoxuu/hexo-theme-stellar/issues) 反馈。# comments:# service: giscus# giscus:# data-repo: xaoxuu/hexo-theme-stellar# data-mapping: number# data-term: 226base_dir: /wiki/WebSec/tree: 开始: - API测试 # - releases # 使用: # - bbb # - pages # - sidebar # - tag-plugins # - tag-plugins/express # - tag-plugins/data # - tag-plugins/container # - comments # 文档系统: # - wiki-settings # 进阶玩法: # - widgets # - advanced-settings # - notes # - fcircle # 技术支持: # - articles # - todo # - contributors 在此文档项目的 md 文件的 front-matter 部分指定所属的项目名（即上一步创建的文件名 项目名.yml） ---layout: wiki # 使用wiki布局模板wiki: id # 这是项目id，对应 /data/wiki/id.ymltitle: 这是分页标题--- 在 blog/source/_data/ 文件夹中创建一个 wiki.yml 文件，在其中写入需要显示的项目 id： - id- 其它项目 NOTEhttps://xaoxuu.com/wiki/stellar/wiki-settings/notes.html OKR目标管理https://xaoxuu.com/wiki/stellar/tag-plugins/express/#okr-%E7%9B%AE%E6%A0%87%E7%AE%A1%E7%90%86"},{"title":"About Me","path":"/about/index.html","content":"👋 Hi, I’m M3ng9e. 👀 I’m interested in Cyberspace Security. 💻 Web security Red team Bug bounty hunter 🌱 凌驭空间·OverSpace 🏠 Blog：https://m3ng9e.github.io/ 🆒王权之势寻苍穹，萌蘖向阳成参天。 💽Music Movies Valorant"},{"title":"年华就该是温润、流动，但只能缓缓向前","path":"/notes/缓缓向前.html","content":"我似乎看到多年以后，你站在一扇蓝色大门前，你笑着，我跑向你。三年、五年以后，甚至更久更久以后，我们会变成什么样的大人呢？我闭着眼睛也看不见自己，但是，我却可以看见你。 ——《蓝色大门》 Hi, Dear Meng. 现在是北京时间的凌晨三点，我夜不能寐，想与你聊聊心中所感，便起床写了这封信。 站在快二十三岁的节点回望，十八岁后的五年里，日子缓慢，简单散漫自由的校园生活，充斥着过一日是一日的快乐。这些日子里你成长了些许，也经历了不少，走过了一个个的岔路口，反复向自己问询人生的答案。 我究竟向往的是什么？人生的意义是什么？努力真的有用吗？我会不会很差劲很笨？为什么我总是坚持不下来？真的一辈子要做这一行嘛？ 在很多个躺在床上睡不着的夜晚里，你有很多问题找不到答案。 你有很多想法，一些灵机一动的创业 idea。有很多想去的地方，冰岛、大理、威海、海南等，王阳明先生的龙场，鲁迅先生的三味书屋等等。有很多想看的书，想看的电影和剧、想发展艺术、想去国外留学。 你对未来的生活充满了很多幻想，但生活充满了不定性，对父母日渐苍老的恐慌，对工作或读研的焦虑，夹杂着一事无成的迷茫。 也好在你还有很多无条件永远支持你的人，家人，老师，好朋友。好在你经常自省，如果用《夏日重现》里的话说就是俯瞰自己。也好在你才二十二岁，还年轻，有激情。 要知道我们从来都不是为了谁而活着，所以请尽情地、努力地、真实地去做那个你心目中的自己。有挫折是为了让你变强，有冷眼嘲笑也没什么大不了，静下心来去做自己的事情好了。 就像你喜欢的朋友圈仅自己可见的那句话说的： 无人问津也好，技不如人也罢，你要试着安静下来，去做自己该做的事，而不是让内心烦躁、焦虑，毁掉你本就不多的热情和定力。 你最近还偶尔熬夜刷了一些剧，《Breaking Bad》、《Better Call Saul》等。老白和吉米的故事很吸引你，有时候也会想： 如果知道自己的人生只剩下那么两年，你会做什么？生命真的很长吗？ 我们日复一日地度过自己的人生，有时争分夺秒，有时却又大手挥霍。我们又有多少时间呢？ 认真地想了这个问题，于是你算了算。 假设活到 60 岁，你剩下 37 年，13505 天。 如果每天当作一局游戏的话，你只剩下一万多局。 每天睡眠、吃饭、洗澡花费 10 小时，你真正拥有属于自己的时间只有 7877 天。 你有很多目标想在 28 岁之前实现的，1825 天的时间，计算下来，时间真的好少。成为专家需要一万个小时，每天学习 10 小时，至少得坚持三年。坚持，简单两个字，却是难以坚持。 但时间本就不应该被这么精打细算吧？这样活得不自由、也不快乐。 谈到太远大、难以实现的目标，总是让人心生惧怕，不想面对。 在学校里跑步的时候，你信誓旦旦地和舍友说自己今天要跑 5 公里不停，可是一想到五公里要在操场上跑 12.5 圈，你便犹豫了。 “天啊，持续跑 5 圈已经很累了好吗！”，于是那天你没去。 但你是一个喜欢和自己较劲的人。第二天，你看到 跑 5 公里需要 35 分钟左右，你很质疑。于是你决定试试。 你看着手表，一公里、二公里、三点八公里、四点六公里，心里想着再多跑两圈就好了。最终你一身汗跑完了 5.03KM，花了 32 分 13 秒。中途有三四次想放弃，但你没有停下来。 其实你都明白，很多目标和跑步一样，做好规划，知行合一，一步一个脚印，一定会好的。 如阳明先生所说：“吾心自有光明月，千古团圆永无缺。” 知是行之始，行是知之成。 做到心中无愧，知行合一就很好了。 当然，对于未来也不必太过焦虑。 仔细想想，最初的梦想和初衷都还在，距离它，是不是更近了一些呢？ 好像是的。 你很喜欢 UP 主 小鹿采访乌镇和黄磊的最新一期结尾里看着被风吹拂的湖面说的那句话： 年华就该是温润、流动，但只能缓缓向前。 你想起了四年前和好友去杭州游玩时看到的西湖湖面。想必在没有见面的日子里，大家也都在温润地、流动地、缓缓向前。 最后送你一句话吧，来自《绝命毒师》剧场版的结尾，小粉和 Jane 的对话： “I’ve gone where the universe takes me my whole life, It’s better to make those decisions for yourself.” “在浩瀚的宇宙中随波逐流，不如追寻你的心之所向。 希望你越来越好的自己 2022.12.15"},{"path":"/notes/index.html","content":"欢迎来到《小王日记》“生活褶皱里的灵感标本，不定期更新。“ 这里栖息着未完成的野心、灵光乍现的哲思，以及一颗总在计划却常被咖啡打乱的灵魂。 更新频率: 薛定谔式内容密度: 50%干货 + 50%碎碎念安全等级: [需咖啡因解密] O1 2025年的小目标：SRC 正常 10% KR1 重构 安全技能 和 wiki 知识库 完成portswigger靶场并融合之前所学转化为checklist通过CISP-PTE考试重塑php&python，掌握基本php代码审计和python工具开发。完善web安全知识库，并基本完善其余JAVA安全/工具开发/内网渗透等知识库 正常 10% KR2 对各大SRC进行漏洞挖掘赚取赏金 正常 10%"},{"title":"API测试","path":"/wiki/WebSec/API测试.html","content":"API安全测试API基础文章：https://aws.amazon.com/what-is/api/ API文章 - GraphQL与RESTful：WebAPI时代的攻击面 - 先知社区 文章 - API安全学习笔记 - 先知社区 OWASPcrAPI: completely ridiculous API (crAPI) 漏洞挖掘1、发现API （api文档、递归爆破），查找隐藏的API，隐藏的参数。 2、支持的不同的HTTP请求方法 http verbs可以爆破。 大规模分配漏洞大规模分配（也称为自动绑定）可以无意间创建隐藏的参数。当软件框架自动将请求参数绑定到内部对象上的字段时，就会发生。因此，大规模分配可能会导致应用程序支持参数，这些参数从未打算由开发人员处理。 预防API中的漏洞Burp靶场lab1Lab: Exploiting an API endpoint using documentation step: 修改邮箱，发现了PATCH apiuserwiener可疑的接口 尝试找到api文档，GET api HTTP2，找到API文档，进行删除DELETE apiusercarlos。 总结：每个功能点都进行尝试，找到可疑的接口数据包，进行进一步分析。 lab2Lab: Finding and exploiting an unused API endpoint step: 对GET apiproducts1price 进行测试所支持的请求方法 发现其支持PATCH，根据提示，只支持JSON格式。 修改content-type: applicationjson，并添加一个空的json请求体。 根据提示构造参数，完成价格修改。回到购买页面，购买商品。 总结：对于可疑API可以进行测试所支持的请求方法，再根据提示构造参数。 lab3Testing mass assignment vulnerabilities测试大规模分配漏洞（自动绑定漏洞） Lab: Exploiting a mass assignment vulnerability https://portswigger.net/web-security/api-testing/lab-exploiting-mass-assignment-vulnerability step: 进行买夹克，发现最最后的接口是apicheck 在GET请求中，对比POST请求多了一个参数，添加进行，修改值为x，发现参数被接收，修改百分比为100，导致价格为0。成功购买商品。 {“chosen_discount”:{“percentage”:100},”chosen_products”:[{“product_id”:”1”,”quantity”:1}]} 总结：对于API的不同请求方法的响应包，请求包参数需要敏感一些，尝试添加在请求中，更改数值查看响应，若参数被接收，那么就基本存在自动绑定漏洞的。"},{"title":"参数污染","path":"/wiki/WebSec/服务器端参数污染.html","content":"参数污染测试于查询字符串中截断的字符串GET /userSearch?name=peter%23fooback=/home前端将尝试访问以下URL：GET /users/search?name=peter#foopublicProfile=true如果响应返回用户彼得，则服务器端查询可能已被截断。如果返回了无效的名称错误消息，则该应用程序可能已将FOO视为用户名的一部分。这表明服务器端请求可能没有被截断。如果您能够截断服务器端请求，则可以删除将公共填写字段设置为true的要求。您也许可以利用此功能返回非公开用户配置文件。 注射无效的参数GET /userSearch?name=peter%26foo=xyzback=/home服务器请求：GET /users/search?name=peterfoo=xyzpublicProfile=true如果响应不变，则可能表明该参数已成功注入但被应用程序忽略。接下来可以尝试注入有效参数 注入有效参数GET /userSearch?name=peter%26email=fooback=/home服务器请求：GET /users/search?name=peteremail=foopublicProfile=true查看有关如何解析其他参数的响应。 覆盖现有参数GET /userSearch?name=peter%26name=carlosback=/home服务器请求：GET /userSearch?name=peter%26name=carlosback=/home取决于应用程序如何处理第二个参数。这在不同的Web技术方面有所不同。 PHP仅解析最后一个参数。ASP.NET结合了两个参数。Node.js Express仅解析第一个参数。如果能够覆盖原始参数，则可以进行利用。例如，您可以将nameadministrator添加到请求中。这可能使您可以作为管理员用户登录。 REST API 参数污染RESTFUL API可以将参数名称和值放在URL路径中，而不是查询字符串。 GET /edit_profile.php?name=peter === GET /api/private/users/peterURL编码的Peter/../admin提交为名称参数的值GET /edit_profile.php?name=peter%2f..%2fadminGET /api/private/users/peter/../admin如果后端解析，则传递的是/api/private/users/admin lab1Lab: Exploiting server-side parameter pollution in a query string 实验室：在查询字符串中利用服务器端参数污染 step: 先加参数xy 查看响应是否正常，在测试改参数 usernameadministrator%23 提示说有字段未定义 usernameadministrator%26fieldx%23 （fieldx#） type:ClientError,code:400,error:Invalid field. 对field参数进行爆破，并从JS文件中获取到参数reset_token。 csrf=4j30Rmm6kJOhwVYqRJijmyaClFzA6U1cusername=administrator%26field=reset_token%23返回结果result:ayvnw3dojloxcu0sbwzny9xcrkrfddhh,type:reset_token 使用token链接 https://0af4007c03f5116381c7a416008600f6.web-security-academy.net/forgot-password?reset_token=6hb0y08pxxdvfhfdmisufi51njr3fbhu 总结：利用参数污染传递参数，首先xy，使用截断报错获取到缺乏一个字段，再判断能否%26fieldx%23传递另一个参数。 lab2Lab: Exploiting server-side parameter pollution in a REST URL step: usernameadministrator# usernameadministrator? 都显示无效路由 username.administrator 正常响应了请求 ..无效路由 type:email,result:*****@normal-user.net username........administrator 一直增加 error: Unexpected response from API server: html head meta charset=\\UTF-8\\ titleNot Found\\/title \\/head body h1Not found\\/h1 pThe URL that you requested was not found.\\/p \\/body \\/html 返回未找到的响应。这表明您已经在API根部导航。 ........openapi.json%23 error: Unexpected response from API server: \\openapi\\: \\3.0.0\\, \\info\\: \\title\\: \\User API\\, \\version\\: \\2.0.0\\ , \\paths\\: \\/api/internal/v1/users/username/field/field\\: \\get\\: \\tags\\: [ \\users\\ ], \\summary\\: \\Find user by username\\, \\description\\: \\API Version 1\\, \\parameters\\: [ ame\\: \\username\\, \\in\\: \\path\\, \\description\\: \\Username\\, \\required\\: true, \\schema\\: ...返回了一条API/api/internal/v1/user/username/field/field administrator/field/email%23 响应正常 administrator/field/passwordResetToken%23 不支持 可能是版本不行 ../../v1/users/administrator/field/passwordResetToken%23 成功了返回了token 利用token重置密码，成功！"},{"title":"身份验证","path":"/wiki/WebSec/身份验证.html","content":"身份验证漏洞的类型有两种： 暴力破解 逻辑 lab1Lab: Username enumeration via different responses 用户名枚举 step: 提示无效的用户名，固定爆破用户名 爆破出用户名，固定爆破密码 Lab2Lab: 2FA simple Bypass 双因素认证Bypass 条件 ​\tA账户:账号密码 认证码 ​\tB账户:账号密码 无认证码 step: 登录A账号，记录登陆后的URL 在B账号登录到2FA认证码的时候，进行输入登陆后的URL，成功登录。 Lab3Lab: Password reset broken logic 条件 ​\tA账户：账号密码 邮箱 ​\tB账号：账号 step: 使用A账户忘记密码，生成找回密码链接，https://0a1e000404ca580a8cd0625e001b0021.web-security-academy.net/forgot-password?temp-forgot-password-token=qkhxsmxyksqfcmxsuuogatkvodrkyhsu 使用临时token进行修改密码 研究提交修改密码请求发现post数据包有用户名参数，修改为carlos，成功重置。 Lab4Lab: Username enumeration via subtly different responses 通过微妙的响应列举用户名 step： 可以爆破，无提示明显，固定用户名进行爆破，进行grep提取响应，发现有细微区别，再爆破密码，成功。 Lab5Lab: Username enumeration via response timing step: 1. 限制请求次数，使用x-forwded-for 1. 将密码设置为很长的字符串，用户名正确就会校验密码，时间会很长。爆破出密码 Lab6Lab: Broken brute-force protection, IP block 利用正确的密码 进行Bypass请求错误次数"}]